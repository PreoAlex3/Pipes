
Programul in Windows
#include <iostream>
#include <vector>
#include <windows.h>
using namespace std;

int numbers = 10000;
int noProcesses = 10;

bool isPrime(int n) {
    if (n <= 1) return false;
    for (int i = 2; i * i <= n; i++) {
        if (n % i == 0)
            return false;
    }
    return true;
}

void childProcess(HANDLE readPipe, HANDLE writePipe) {
    int j, i = 1;
    int vector[1000] = {};

    ReadFile(readPipe, &i, sizeof(int), NULL, NULL);

    for (j = i * (numbers / noProcesses) + 1; j <= (i + 1) * (numbers / noProcesses); j++) {
        if (j <= numbers) {
            if (isPrime(j)) {
                vector[0]++;
                vector[vector[0]] = j; 
            }
        }
    }

    WriteFile(writePipe, &vector, 4000, NULL, NULL);
    ExitProcess(1);
}

void parentProcess(HANDLE readPipe, HANDLE writePipe) {
    int i, j;
    int value[1000] = {};

    for (j = 0; j < noProcesses; j++) {
        WriteFile(writePipe, &j, sizeof(int), NULL, NULL);
    }

    for (j = 0; j < noProcesses; j++) {
        printf("Process %d: ", j);
        ReadFile(readPipe, value, 4000, NULL, NULL);

        for (i = 1; i <= value[0]; i++) {
            printf("%d, ", value[i]);
        }
        printf("\n");
    }
}

int main() {
    int i, j;
    HANDLE firstPipe[2], secondPipe[2];

    SECURITY_ATTRIBUTES sa = { sizeof(SECURITY_ATTRIBUTES), NULL, TRUE };

    if (!CreatePipe(&firstPipe[0], &firstPipe[1], &sa, 0)) {
        printf("There is an error creating the pipe.\n");
        return -1;
    }
    if (!CreatePipe(&secondPipe[0], &secondPipe[1], &sa, 0)) {
        printf("There is an error creating the pipe.\n");
        return -1;
    }

    for (j = 0; j < noProcesses; j++) {
        STARTUPINFO si;
        PROCESS_INFORMATION pi;

        ZeroMemory(&si, sizeof(si));
        si.cb = sizeof(si);
        ZeroMemory(&pi, sizeof(pi));

        wstring command = L"";
        if (!CreateProcess(NULL, (LPWSTR)command.c_str(), NULL, NULL, TRUE, 0, NULL, NULL, &si, &pi)) {
            childProcess(firstPipe[0], secondPipe[1]);
        }
    }

    parentProcess(secondPipe[0], firstPipe[1]);

    CloseHandle(firstPipe[0]);
    CloseHandle(firstPipe[1]);
    CloseHandle(secondPipe[0]);
    CloseHandle(secondPipe[1]);

    return 0;
